package com.company.rapidclipse.demo.dragdrop.ui;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;

import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.acceptcriteria.AcceptAll;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.server.StreamResource;
import com.vaadin.server.StreamResource.StreamSource;
import com.vaadin.server.StreamVariable;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DragAndDropWrapper;
import com.vaadin.ui.DragAndDropWrapper.DragStartMode;
import com.vaadin.ui.DragAndDropWrapper.WrapperTransferable;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Html5File;
import com.vaadin.ui.Notification;
import com.vaadin.ui.VerticalLayout;
import com.xdev.ui.PopupWindow;
import com.xdev.ui.XdevPanel;
import com.xdev.ui.XdevVerticalLayout;
import com.xdev.ui.XdevView;

public class WndExternalFileDragDrop extends XdevView {

	/**
	 * 
	 */
	public WndExternalFileDragDrop() {
		super();
		this.initUI();
        
		final DragAndDropWrapper dragAndDropWrapper = new DragAndDropWrapper(this.dragDropPanel);
		dragAndDropWrapper.setDragStartMode(DragStartMode.COMPONENT);

		dragAndDropWrapper.setDropHandler(new DropHandler() {

			@Override
			public AcceptCriterion getAcceptCriterion() {
				// TODO Auto-generated method stub
				return AcceptAll.get();
			}

			@Override
			public void drop(final DragAndDropEvent event) {

				// Get the source and target component
				final WrapperTransferable dragComponent = (WrapperTransferable) event
						.getTransferable();

				final Html5File[] files = dragComponent.getFiles();
				final int fileSizeLimit = 2 * 1024 * 1024; // 2MB

				for (final Html5File html5File : files) {
					final String fileName = html5File.getFileName();

					if (html5File.getFileSize() > fileSizeLimit) {
						Notification.show("File rejected. Max 2MB files are accepted by Sampler",
								Notification.Type.WARNING_MESSAGE);
					} else {
						final ByteArrayOutputStream bas = new ByteArrayOutputStream();
						final StreamVariable streamVariable = new StreamVariable() {

							@Override
							public OutputStream getOutputStream() {
								return bas;
							}

							@Override
							public boolean listenProgress() {
								return false;
							}

							@Override
							public void onProgress(final StreamingProgressEvent event) {
							}

							@Override
							public void streamingStarted(final StreamingStartEvent event) {
							}

							@Override
							public void streamingFinished(final StreamingEndEvent event) {
								
								showFile(fileName, bas);
								
							}

							@Override
							public void streamingFailed(final StreamingErrorEvent event) {
								
							}

							@Override
							public boolean isInterrupted() {
								return false;
							}
						};
						html5File.setStreamVariable(streamVariable);
						
					}
				}

			}
		});

		this.verticalLayout.removeAllComponents();

		this.verticalLayout.addComponent(dragAndDropWrapper);

		final XdevVerticalLayout xdevVerticalLayout = new XdevVerticalLayout();
		xdevVerticalLayout.setSizeFull();
		this.verticalLayout.addComponent(xdevVerticalLayout);
		this.verticalLayout.setExpandRatio(xdevVerticalLayout, 1.0F);
	}

	@Override
	public void enter(final ViewChangeListener.ViewChangeEvent event) {
		super.enter(event);

	}

	private void showFile(final String name, final ByteArrayOutputStream bas) {
		// resource for serving the file contents
		final StreamSource streamSource = () -> {
			if (bas != null) {
				final byte[] byteArray = bas.toByteArray();
				return new ByteArrayInputStream(byteArray);
			}
			return null;
		};
		final StreamResource resource = new StreamResource(streamSource, name);

		// show the file contents - images only for now
		final Embedded embedded = new Embedded(name, resource);
		showComponent(embedded, name);
	}

	private void showComponent(final Component c, final String name) {
		final VerticalLayout layout = new VerticalLayout();
		layout.setSizeUndefined();
		layout.setMargin(true);
		c.setSizeUndefined();
		layout.addComponent(c);
		
		final XdevView view = new XdevView();
		view.setContent(layout);
		view.setWidth("1200px");
		view.setHeight("600px");
		
		PopupWindow.For(view).closable(true).draggable(true).resizable(true).modal(true).show();
	}

	/*
	 * WARNING: Do NOT edit!<br>The content of this method is always regenerated by
	 * the UI designer.
	 */
	// <generated-code name="initUI">
	private void initUI() {
		this.panel = new XdevPanel();
		this.verticalLayout = new XdevVerticalLayout();
		this.dragDropPanel = new XdevPanel();
	
		this.dragDropPanel.setCaption("Drop your files here for upload");
		this.dragDropPanel.setStyleName("shadowed");
	
		this.dragDropPanel.setWidth(600, Unit.PIXELS);
		this.dragDropPanel.setHeight(200, Unit.PIXELS);
		this.verticalLayout.addComponent(this.dragDropPanel);
		this.verticalLayout.setComponentAlignment(this.dragDropPanel, Alignment.MIDDLE_CENTER);
		final CustomComponent verticalLayout_spacer = new CustomComponent();
		verticalLayout_spacer.setSizeFull();
		this.verticalLayout.addComponent(verticalLayout_spacer);
		this.verticalLayout.setExpandRatio(verticalLayout_spacer, 1.0F);
		this.verticalLayout.setSizeFull();
		this.panel.setContent(this.verticalLayout);
		this.panel.setSizeFull();
		this.setContent(this.panel);
		this.setSizeFull();
	} // </generated-code>

	// <generated-code name="variables">
	private XdevPanel panel, dragDropPanel;
	private XdevVerticalLayout verticalLayout;
	// </generated-code>

}
